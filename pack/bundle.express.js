import { writeFile, mkdir } from "node:fs/promises";
import { join, dirname } from "node:path";

const files = {
  ".gitignore": "#: --------------------------------\n#: veriKami\n\nnode_modules\n\n**/•*\n*~\nIcon*\n",
  "LICENSE": "MIT License\n\nCopyright (c) 2025 °// veriKami °// Weronika Kami\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "README.md": "# Remark Deflist Revisited °// Express.js Example\n\n[![GH][GH Badge]][GH]\n[![NPM][NPM Badge]][NPM]\n[![JSR][JSR Badge]][JSR]\n[![Downloads][Downloads Badge]][Downloads]\n[![Socket][Socket Badge]][Socket]\n\nNode.js implementation of the **`@verikami/remark-deflist-revisited`** module, demonstrating enhanced definition lists processing in markdown with full HTML output.\n\n**[Remark Deflist Revisited][module]** is a **[Remark]** plugin. A wrapper around **`remark-deflist`** with improved support for nested definition lists. It preserves all the original functionality and performs additional processing. \n\n## Overview\n\nThis project provides a Express.js equivalent of the **[Cloudflare Worker][+:worker]** example, showcasing how to use **`remark-deflist-revisited`** in a Node.js environment with **[Express.js]** server and modular processing capabilities. **[Astro][+:astro]** and **[Simple][+:simple]** example is also available.\n\n## Features\n\n- **Full Markdown Processing**: Convert markdown with definition lists to HTML\n- **Enhanced Definition Lists**: Support for complex nested structures\n- **Express.js Server**: RESTful API endpoints for markdown processing\n- **Modular Design**: Reusable processor class for integration into other projects\n- **Beautiful Styling**: Professional CSS styling with gradient background\n- **Error Handling**: Comprehensive error handling and validation\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 20 or higher\n- npm, pnpm or yarn\n\n### Installation\n\n```bash\n## Clone or download this project\nツ git clone git@github.com:veriKami/remark-deflist-revisited-express.git\n\n## Install dependencies\nツ npm install\n```\n\n### Running the Server\n\n```bash\n## Start the development server\nツ npm start\n\n## Or run with watch mode\nツ npm run dev\n```\n\nThe server will start on `http://localhost:3000`\n\n## API Endpoints\n\n### GET `/`\n- **Description**: Returns a demo page with pre-processed markdown\n- **Response**: HTML page with styled content\n\n### POST `/process`\n- **Description**: Process custom markdown and return full HTML page\n- **Body**: `{ \"markdown\": \"Your markdown content here\" }`\n- **Response**: Complete HTML page with styling\n\n### POST `/api/process`\n- **Description**: Process custom markdown and return JSON response\n- **Body**: `{ \"markdown\": \"Your markdown content here\" }`\n- **Response**: `{ \"html\": \"<p>Processed HTML</p>\", \"processed\": true }`\n\n## Usage Examples\n\n### Using the Express Server\n\n```bash\n## Demo page\nツ curl http://localhost:3000\n\n## Process custom markdown (returns HTML)\nツ curl -X POST http://localhost:3000/process \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"markdown\": \"# Title\\n\\nTerm\\n: Definition\"}'\n\n## Process custom markdown (returns JSON)\nツ curl -X POST http://localhost:3000/api/process \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"markdown\": \"# Title\\n\\nTerm\\n: Definition\"}'\n```\n\n### Using the Module Directly\n\n```javascript\nimport { MarkdownProcessor } from './lib/markdown.processor.js';\n\nconst processor = new MarkdownProcessor();\n\n//: Process to plain HTML\n//: -----------------------------------------\nconst html = await processor.process(`\n# Example\n\nCloudflare Workers\n: Serverless platform\n: Runs on the edge\n`);\n\n//: Process to full HTML page\n//: -----------------------------------------\nconst page = await processor.processToHTML(`\n# Example Page\n\nNode.js\n: JavaScript runtime\n: Event-driven architecture\n`, {\n  title: 'My Custom Title',\n  includeStyles: true\n});\n```\n\n## Project Structure\n\n```\n.\n├── lib/markdown.processor.js  # Modular markdown processor class\n├── server.js                  # Express.js server implementation\n├── package.json               # Dependencies and scripts\n└── README.md                  # This file\n```\n\n## Dependencies\n\n### Production Dependencies\n\n- `@verikami/remark-deflist-revisited` → Enhanced definition lists for remark\n- `express` → Web server framework\n- `remark` → Markdown processor\n- `remark-html` → HTML serializer for remark\n- `dedent` → Dedent template strings\n\n## Comparison with Other Implementations\n\n| Feature         | Express.js   | Astro Integration   | Cloudflare Worker |\n|-----------------|--------------|---------------------|-------------------|\n| **Rendering**   | Server-side  | SSG/SSR             | Edge              |\n| **Build Time**  | Runtime      | Pre-built at deploy | Runtime           |\n| **Performance** | Good         | Excellent (static)  | Excellent (edge)  |\n| **Complexity**  | Medium       | Low                 | Low               |\n| **Use Case**    | Dynamic apps | Documentation sites | API endpoints     |\n\n\n## Development\n\n### Adding New Features\n\n1. Extend the `MarkdownProcessor` class with new methods\n2. Add new routes to `server.js`\n3. Update error handling as needed\n\n### Custom Styling\n\nModify the `getStyles()` method in `markdown.processor.js` to customize the appearance:\n\n```javascript\ngetStyles() {\n  return `\n    <style>\n      /* Your custom CSS here */\n    </style>\n  `;\n}\n```\n\n## License\n\nThis project is Open Source and available under the MIT License  \n2025 © MIT °// [veriKami] °// [Weronika Kami]\n\n[veriKami]: https://verikami.com\n[Weronika Kami]: https://linkedin.com/in/verikami\n\n[module]: https://github.com/veriKami/remark-deflist-revisited\n[+:simple]: https://github.com/veriKami/remark-deflist-revisited-simple\n[+:express]: https://github.com/veriKami/remark-deflist-revisited-express\n[+:worker]: https://github.com/veriKami/remark-deflist-revisited-worker\n[+:astro]: https://github.com/veriKami/remark-deflist-revisited-astro\n\n[GH]: https://github.com/veriKami/remark-deflist-revisited\n[GH Badge]: https://img.shields.io/badge/GitHub-Repository-blue?logo=github\n\n[Remark]: https://remark.js.org\n[Express.js]: https://expressjs.com\n\n[GH Badge]: https://img.shields.io/badge/GitHub-Repository-blue?logo=github\n[GH]: https://github.com/veriKami/remark-deflist-revisited\n\n[NPM Badge]: https://img.shields.io/npm/v/@verikami/remark-deflist-revisited?logo=npm&logoColor=white&labelColor=red&color=black\n[NPM]: https://www.npmjs.com/package/@verikami/remark-deflist-revisited\n\n[JSR Badge]: https://jsr.io/badges/@verikami/remark-deflist-revisited\n[JSR]: https://jsr.io/@verikami/remark-deflist-revisited\n\n[Downloads Badge]: https://img.shields.io/npm/dm/@verikami/remark-deflist-revisited.svg\n[Downloads]: https://www.npmjs.com/package/@verikami/remark-deflist-revisited\n\n[Socket Badge]: https://badge.socket.dev/npm/package/@verikami/remark-deflist-revisited\n[Socket]: https://socket.dev/npm/package/@verikami/remark-deflist-revisited\n",
  "lib/markdown.processor.js": "//: markdown.processor.js\n//: -----------------------------------------\nimport { remark } from \"remark\";\nimport html from \"remark-html\";\nimport dedent from \"dedent\";\nimport deflist from \"@verikami/remark-deflist-revisited\";\n\n//: Main class\n//: -----------------------------------------\nexport class MarkdownProcessor {\n  constructor() {\n    this.processor = remark().use(deflist).use(html);\n  }\n\n  async process(markdown) {\n    const result = await this.processor.process(markdown);\n    return String(result);\n  }\n\n  async processToHTML(markdown, options = {}) {\n    const { title = \"Markdown Processor\", includeStyles = true } = options;\n    \n    const content = await this.process(markdown);\n    \n    return dedent`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>${title}</title>\n          ${includeStyles ? this.getStyles() : \"\"}\n        </head>\n        <body>\n          <div class=\"container\">\n            ${content}\n          </div>\n        </body>\n      </html>\n    `;\n  }\n\n  getStyles() {\n    return dedent`\n      <style>\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n          max-width: 800px;\n          margin: 0 auto;\n          padding: 20px;\n          line-height: 1.6;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: #333;\n        }\n        .container {\n          background: white;\n          border-radius: 12px;\n          padding: 30px;\n          box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n        }\n        h1 { color: #667eea; margin-top: 0; }\n        dl { margin: 20px 0; }\n        dt {\n          font-weight: bold;\n          margin: 20px 0 0;\n          color: #667eea;\n          font-size: 1.1em;\n        }\n        dd {\n          margin: 5px 0 0 40px;\n          color: #666;\n        }\n        ul { margin: 0 10px; }\n        li { margin: 0; }\n      </style>\n    `;\n  }\n}\n\n//: Sample markdown to process\n//: -----------------------------------------\nconst markdown = dedent`\n  # Example Markdown\n\n  Node.js Module\n  : Easy to use\n  : Compatible with remark ecosystem\n`;\n\n//: Module Usage\n//: -----------------------------------------\nconst processor = new MarkdownProcessor();\n\n//: Przetwarzanie do czystego HTML\n//: -----------------------------------------\nprocessor.process(markdown).then(html => {\n  console.log(\"HTML output:\", html);\n});\n\n//: Processing to a full HTML page\n//: -----------------------------------------\nprocessor.processToHTML(markdown, { \n  title: \"My Processed Markdown\" \n}).then(fullHtml => {\n  console.log(\"Full HTML page:\", fullHtml);\n});\n\n//: EXPORT\n//: -----------------------------------------\nexport default MarkdownProcessor;\n",
  "package.json": "{\n  \"name\": \"remark-deflist-revisited-express\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Express.js example for @verikami/remark-deflist-revisited\",\n  \"keywords\": [\n    \"remark\",\n    \"remark-plugin\",\n    \"remark-deflist\",\n    \"markdown\",\n    \"markdown-plugin\",\n    \"definition-list\",\n    \"deflist\",\n    \"parser\",\n    \"veriKami\"\n  ],\n  \"author\": \"veriKami <verikami@gmail.com> (https://verikami.com/)\",\n  \"license\": \"MIT\",\n  \"repository\": \"github:veriKami/remark-deflist-revisited-express\",\n  \"homepage\": \"https://github.com/veriKami/remark-deflist-revisited-express#readme\",\n  \"type\": \"module\",\n  \"main\": \"server.js\",\n  \"engines\": {\n    \"node\": \">=20.0.0\"\n  },\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"node --watch server.js\"\n  },\n  \"dependencies\": {\n    \"@verikami/remark-deflist-revisited\": \"^0.6.4\",\n    \"dedent\": \"^1.7.0\",\n    \"express\": \"^4.21.2\",\n    \"remark\": \"^15.0.1\",\n    \"remark-html\": \"^16.0.1\"\n  }\n}\n",
  "server.js": "//: server.js\n//: -----------------------------------------\nimport express from \"express\";\nimport { remark } from \"remark\";\nimport html from \"remark-html\";\nimport dedent from \"dedent\";\nimport deflist from \"@verikami/remark-deflist-revisited\";\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\n\n//: Processing function\n//: -----------------------------------------\nasync function processMarkdown(markdown) {\n  const output = await remark()\n    .use(deflist)\n    .use(html)\n    .process(markdown);\n\n  return dedent`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Remark Deflist Revisited °// Express.js Example</title>\n        <meta name=\"author\" content=\"veriKami °// Weronika Kami\">\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            line-height: 1.6;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: #333;\n          }\n          .container {\n            background: white;\n            border-radius: 12px;\n            padding: 30px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n          }\n          h1, h2 { color: #667eea; margin-top: 0; }\n          dl { margin: 20px 0; }\n          dt {\n            font-weight: bold;\n            margin: 20px 0 0;\n            color: #667eea;\n            font-size: 1.1em;\n          }\n          dd {\n            margin: 5px 0 0 40px;\n            color: #666;\n          }\n          ul { margin: 0 10px; }\n          li { margin: 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          ${String(output)}\n          <hr style=\"margin: 40px 0; border: none; border-top: 1px solid #ddd;\">\n          <p style=\"text-align: center; color: #888; font-size: 0.9em;\">\n            Created by <a href=\"https://verikami.com\" target=\"_blank\">veriKami</a> °//\n            <a href=\"https://linkedin.com/in/verikami\" target=\"_blank\">Weronika Kami</a> °//\n            <a href=\"https://www.npmjs.com/package/@verikami/remark-deflist-revisited\"\n              target=\"_blank\">remark-deflist-revisited</a>\n          </p>\n        </div>\n      </body>\n    </html>\n  `;\n}\n\n//: Sample markdown to process\n//: -----------------------------------------\nconst markdown = dedent`\n  # Remark Deflist Revisited °// Express.js Example\n\n  Node.js\n  : JavaScript runtime built on Chrome's V8 engine\n  : Uses an event-driven, non-blocking I/O model\n\n  Remark Deflist Revisited\n  : Compatible with Bun, Deno and Cloudflare Workers\n  : Enhanced definition lists support\n  : Supports nested lists\n\n  Markdown\n  : Lightweight markup language\n  : Easy to write and read\n\n  ## Features\n\n  Nested Lists\n  : Support for complex structures\n  : - Item A\n    - Item B\n    - Item C\n\n  Compatibility\n  : Works with modern runtimes\n  : - Node.js\n    - Cloudflare Workers\n    - Deno\n    - Bun\n`;\n\n//: Main Route - returns processed markdown\n//: -----------------------------------------\napp.get(\"/\", async (req, res) => {\n  try {\n    const htmlResponse = await processMarkdown(markdown);\n    \n    res.set({\n      \"Content-Type\": \"text/html; charset=utf-8\",\n      \"X-Powered-By\": \"Node.js + Express + Remark Deflist Revisited\"\n    });\n    \n    res.send(htmlResponse);\n  }\n  catch (err) {\n    res.status(500).json({\n      error: \"Failed to process markdown\",\n      details: err.message\n    });\n  }\n});\n\n//: Route to process your own markdown\n//: -----------------------------------------\napp.post(\"/process\", async (req, res) => {\n  try {\n    const { markdown: customMarkdown } = req.body;\n    \n    if (!customMarkdown) {\n      return res.status(400).json({\n        error: \"Markdown content is required\"\n      });\n    }\n\n    const htmlResponse = await processMarkdown(customMarkdown);\n    \n    res.set({\n      \"Content-Type\": \"text/html; charset=utf-8\",\n      \"X-Powered-By\": \"Node.js + Express + Remark Deflist Revisited\"\n    });\n    \n    res.send(htmlResponse);\n  }\n  catch (err) {\n    res.status(500).json({\n      error: \"Failed to process markdown\",\n      details: err.message\n    });\n  }\n});\n\n//: Route to return JSON with parsed HTML\n//: -----------------------------------------\napp.post(\"/api/process\", async (req, res) => {\n  try {\n    const { markdown: customMarkdown } = req.body;\n    \n    if (!customMarkdown) {\n      return res.status(400).json({\n        error: \"Markdown content is required\"\n      });\n    }\n\n    const output = await remark()\n      .use(deflist)\n      .use(html)\n      .process(customMarkdown);\n\n    res.json({\n      html: String(output),\n      processed: true\n    });\n  }\n  catch (err) {\n    res.status(500).json({\n      error: \"Failed to process markdown\",\n      details: err.message\n    });\n  }\n});\n\n//: SERVER\n//: -----------------------------------------\napp.listen(PORT, () => {\n  console.log(`🌐 Server running on http://localhost:${PORT}`);\n  console.log(\"👄 Available routes:\");\n  console.log(\"   GET / - Demo page\");\n  console.log(\"   POST /process - Process custom markdown (returns HTML)\");\n  console.log(\"   POST /api/process - Process custom markdown (returns JSON)\");\n});\n"
};

async function ensureDir(dir) {
  try {
    await mkdir(dir, { recursive: true });
  }
  catch (err) {
    if (err.code !== "EEXIST") throw err;
  }
}

async function generate(target = ".", $ = true) {
  if ($) console.log("\n🚺 CREATING PROJECT\n");
  for (const [filePath, content] of Object.entries(files)) {
    const fullPath = join(target, filePath);
    await ensureDir(dirname(fullPath));
    await writeFile(fullPath, content);
    if ($) console.log("   📄", filePath)
    else console.log("   ↳ Created:", filePath)
  }
  if ($) console.log("\n✅ PROJECT READY");
}

if (import.meta.url.endsWith(process.argv[1])) {
  if (!process.argv[2]) {
    console.log("\nUSAGE: node pack/bundle.express.js <path>");
    console.log("USING (default): remark-deflist-revisited-express");
  }
  const target = process.argv[2] || "remark-deflist-revisited-express";
  const $ = process.argv[3] === "false" ? false : true;
  generate(target, $).catch(console.error);
}

export default generate;
